<?xml version="1.0" encoding="utf-8"?>
<!--
/////////////////////////////////////////////////////////////////////////////////////
//
//    Simplified BSD License
//    ======================
//    
//    Copyright 2013 Pascal ECHEMANN. All rights reserved.
//    
//    Redistribution and use in source and binary forms, with or without modification,
//    are permitted provided that the following conditions are met:
//    
//    1. Redistributions of source code must retain the above copyright notice, this
//       list of conditions and the following disclaimer. 
//    
//    2. Redistributions in binary form must reproduce the above copyright notice,
//       this list of conditions and the following disclaimer in the documentation
//       and/or other materials provided with the distribution. 
//    
//    THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
//    ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
//    WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
//    DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
//    ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
//    (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
//    LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
//    ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
//    (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
//    SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//    
//    The views and conclusions contained in the software and documentation are those
//    of the authors and should not be interpreted as representing official policies, 
//    either expressed or implied, of the copyright holders.
//    
/////////////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////
//  TodoList.mxml
///////////////////////////////////////////////////////////////

/**
 *  @author Pascal ECHEMANN
 *  @version 1.0.0, 31/10/2013 14:37
 *  @see http://www.flashapi.org/
 */

The todo list component. Contains the list of todo items of the application.
-->
<s:BorderContainer
	xmlns:fx="http://ns.adobe.com/mxml/2009" 
	xmlns:s="library://ns.adobe.com/flex/spark" 
	xmlns:mx="library://ns.adobe.com/flex/halo"
	width="100%"
	borderVisible="false"
	visible="false" includeInLayout="false"
	creationComplete="this.creationCompleteHandler(event);">
	
	<!-- Events declaration: -->
	<fx:Metadata> 
		[Event(name="todoDelete", type="events.TodoListEvent")]
		[Event(name="todoChange", type="events.TodoListEvent")]
		[Event(name="todoStateChange", type="events.TodoListEvent")]
	</fx:Metadata> 
	
	<fx:Script>
		<![CDATA[
			
			import events.TodoListEvent;
			import mx.collections.IList;
			import mx.events.FlexEvent;
			
			//--------------------------------------------------------------------------
			//
			//  Getter / setter properties
			//
			//--------------------------------------------------------------------------
			
			/**
			 * 	Gets or sets the data provider for this list component.
			 */
			public function get dataProvider():IList {
				return this.todoList.dataProvider;
			}
			public function set dataProvider(value:IList):void {
				this.todoList.dataProvider = value;
			}
			
			//--------------------------------------------------------------------------
			//
			//  Public methods
			//
			//--------------------------------------------------------------------------
			
			/**
			 * 	Sets the visibility od the todo list.
			 * 
			 * 	@param	visible	Indicates whether the list is visible (<code>true</code>),
			 * 					or not (<code>false</code>).
			 */
			public function setVisibility(visible:Boolean):void {
				this.visible = this.includeInLayout = visible;
			}
			
			//--------------------------------------------------------------------------
			//
			//  Private methods
			//
			//--------------------------------------------------------------------------
			
			/**
			 * 	@private
			 * 	
			 * 	Invoked after the creation of the component.
			 */
			private function creationCompleteHandler(e:FlexEvent):void {
				this.todoList.addEventListener(TodoListEvent.TODO_DELETE, this.dispatchTodoEvent);
				this.todoList.addEventListener(TodoListEvent.TODO_CHANGE, this.dispatchTodoEvent);
				this.todoList.addEventListener(TodoListEvent.TODO_STATE_CHANGE, this.dispatchTodoEvent);
			}
			
			/**
			 * 	@private
			 * 	
			 * 	Invoked when the user interract with the items in the todo list.
			 */
			private function dispatchTodoEvent(e:TodoListEvent):void {
				this.dispatchEvent(e);
			}
		]]>
	</fx:Script>
	
	<!-- The data group used to render the items of the list -->
	<s:DataGroup
		id="todoList"
		width="100%" height="100%"
		itemRenderer="ui.renderer.TodoListItemRenderer">
		<s:layout>
			<s:VerticalLayout gap="0"/>
		</s:layout> 
	</s:DataGroup>
</s:BorderContainer>