<?xml version="1.0" encoding="utf-8"?>
<!--
/////////////////////////////////////////////////////////////////////////////////////
//
//    Simplified BSD License
//    ======================
//    
//    Copyright 2013 Pascal ECHEMANN. All rights reserved.
//    
//    Redistribution and use in source and binary forms, with or without modification,
//    are permitted provided that the following conditions are met:
//    
//    1. Redistributions of source code must retain the above copyright notice, this
//       list of conditions and the following disclaimer. 
//    
//    2. Redistributions in binary form must reproduce the above copyright notice,
//       this list of conditions and the following disclaimer in the documentation
//       and/or other materials provided with the distribution. 
//    
//    THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
//    ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
//    WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
//    DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
//    ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
//    (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
//    LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
//    ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
//    (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
//    SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//    
//    The views and conclusions contained in the software and documentation are those
//    of the authors and should not be interpreted as representing official policies, 
//    either expressed or implied, of the copyright holders.
//    
/////////////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////
//  AutoCompleteView.mxml
///////////////////////////////////////////////////////////////

/**
 *  @author Pascal ECHEMANN
 *  @version 1.0.0, 02/11/2013 14:32
 *  @see http://www.flashapi.org/
 */

The GUI for the AutoComplete application.
-->
<s:VGroup
	xmlns:fx="http://ns.adobe.com/mxml/2009" 
	xmlns:s="library://ns.adobe.com/flex/spark" 
	xmlns:mx="library://ns.adobe.com/flex/halo"
	xmlns:display="ui.display.*"
	implements="org.flashapi.hummingbird.view.IFlexView"
	width="100%" height="100%"
	horizontalAlign="center" gap="20"
	creationComplete="this.creationCompleteHandler();">
	
	<fx:Script>
		<![CDATA[
			import controllers.IAppController;
			import events.ModelEvent;
			import events.UserInputEvent;
			import models.IAppModel;
			
			//--------------------------------------------------------------------------
			//
			//  Dependencies injection
			//
			//--------------------------------------------------------------------------
			
			/**
			 * 	The model of the application.
			 */
			[Model(alias="AppModel")]
			public var model:IAppModel;
			
			/**
			 * 	The controller of the application.
			 */
			[Controller(alias="AppController")]
			public var controller:IAppController;
			
			//--------------------------------------------------------------------------
			//
			//  Public methods
			//
			//--------------------------------------------------------------------------
			
			/**
			 *	@inheritDoc
			 */
			public function finalize():void { }
			
			//--------------------------------------------------------------------------
			//
			//  Private methods
			//
			//--------------------------------------------------------------------------
			
			/**
			 *	Method invoked when the creation of the view is complete.
			 */
			private function creationCompleteHandler():void {
				this.model.addEventListener(ModelEvent.MODEL_UPDATE, this.modelUpdateHandler);
				this.autoComplete.setCaseMode(this.model.getCaseMode());
				this.autoComplete.dataProvider = this.model.getTagCollection();
			}
			
			/**
			 *	Method invoked each time the changes.
			 */
			private function modelUpdateHandler(e:ModelEvent):void {
				this.autoComplete.setTagListDisplayState(this.model.hasMatchingTags());
			}
			
			/**
			 *	Method invoked each time the user types a new letter in the text field.
			 */
			private function textEditHandler(e:UserInputEvent):void {
				this.controller.setInputValue(e.text);
			}
			
			/**
			 *	Method invoked each time the user changes the case mode..
			 */
			private function caseModeChangeHandler(e:UserInputEvent):void {
				this.controller.setCaseMode(e.caseMode);
			}
		]]>
	</fx:Script>
	
	<s:Spacer height="20"/>
	<!-- Title component -->
	<display:Title/>
	<s:Spacer height="20"/>
	<!-- AutoComplete component -->
	<display:AutoComplete id="autoComplete"
		textEdit="this.textEditHandler(event);"
		caseModeChange="this.caseModeChangeHandler(event);" />
	<!-- Logo component -->
	<display:Logo/>
</s:VGroup>