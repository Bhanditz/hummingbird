<?xml version="1.0" encoding="utf-8"?>
<!--
/////////////////////////////////////////////////////////////////////////////////////
//
//    Simplified BSD License
//    ======================
//    
//    Copyright 2013 Pascal ECHEMANN. All rights reserved.
//    
//    Redistribution and use in source and binary forms, with or without modification,
//    are permitted provided that the following conditions are met:
//    
//    1. Redistributions of source code must retain the above copyright notice, this
//       list of conditions and the following disclaimer. 
//    
//    2. Redistributions in binary form must reproduce the above copyright notice,
//       this list of conditions and the following disclaimer in the documentation
//       and/or other materials provided with the distribution. 
//    
//    THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
//    ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
//    WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
//    DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
//    ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
//    (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
//    LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
//    ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
//    (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
//    SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//    
//    The views and conclusions contained in the software and documentation are those
//    of the authors and should not be interpreted as representing official policies, 
//    either expressed or implied, of the copyright holders.
//    
/////////////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////
//  AutoComplete.mxml
///////////////////////////////////////////////////////////////

/**
 *  @author Pascal ECHEMANN
 *  @version 1.0.0, 02/11/2013 14:32
 *  @see http://www.flashapi.org/
 */

The auto-complete text input component for the AutoComplete application.
-->
<s:Group
	xmlns:fx="http://ns.adobe.com/mxml/2009" 
	xmlns:s="library://ns.adobe.com/flex/spark" 
	xmlns:mx="library://ns.adobe.com/flex/halo">
	
	<!-- Events declaration: -->
	<fx:Metadata> 
		[Event(name="textEdit", type="events.UserInputEvent")]
		[Event(name="caseModeChange", type="events.UserInputEvent")]
	</fx:Metadata>
	
	<fx:Script>
		<![CDATA[
			
			import constants.CaseMode;
			import events.UserInputEvent;
			import flash.events.Event;
			import flash.events.FocusEvent;
			import flash.events.KeyboardEvent;
			import flash.geom.Point;
			import flash.ui.Keyboard;
			import mx.collections.IList;
			import mx.core.FlexGlobals;
			import mx.managers.PopUpManager;
			import spark.events.IndexChangeEvent;
			import spark.components.Group;
			import spark.components.List;
			
			//--------------------------------------------------------------------------
			//
			//  Getter / setter properties
			//
			//--------------------------------------------------------------------------
			
			/**
			 * 	Gets or sets the data provider that contains the matching tags for this
			 * 	component.
			 */
			public function get dataProvider():IList   {
				return _dataProvider;
			}
			public function set dataProvider(value:IList):void {
				if (_dataProvider != value) {
					_dataProvider = value;
					_hasDataProviderChanged = true;
					this.invalidateProperties();
				}
			}
			
			/**
			 * 	Sets the display state of the dropdown tags list.
			 * 
			 * 	@param	hasMatchingTags	Indicates whether the user input 
			 *							has matching tags (<code>true</code>),
			 * 							or not (<code>false</code>).
			 */
			public function setTagListDisplayState(hasMatchingTags:Boolean):void {
				hasMatchingTags ? this.createPopup() : this.removePopup();
			}
			
			/**
			 * 	Sets the initial case mode of the application.
			 * 
			 *	@param	caseMode A constant of the <code>CaseMode</code> class.
			 * 
			 * 	@see constants.CaseMode
			 */
			public function setCaseMode(caseMode:uint):void {
				if (caseMode == CaseMode.CASE_SENSITIVE) {
					this.caseSelect.selected = true;
				} else if (caseMode == CaseMode.CASE_INSENSITIVE) {
					this.caseSelect.selected = false;
				}
			}
			
			//--------------------------------------------------------------------------
			//
			//  Protected methods
			//
			//--------------------------------------------------------------------------
			
			/**
			 *	@private
			 */
			override protected function createChildren():void {
				super.createChildren();
				_tagsList = new List();
				_tagsList.width = 200;
				_tagsList.height = 110;
				_tagsList.addEventListener(
					IndexChangeEvent.CHANGE, this.changeHandler, false, 0, true
				);
			}
			
			/**
			 *	@private
			 */
			override protected function commitProperties():void {
				if (_hasDataProviderChanged) {
					_tagsList.dataProvider = _dataProvider;
					_hasDataProviderChanged = false;
				}
				super.commitProperties();
			}
			
			//--------------------------------------------------------------------------
			//
			//  Private properties
			//
			//--------------------------------------------------------------------------
			
			/**
			 *	@private
			 * 
			 * 	The dropdown list that contains and displayes the matching tags.
			 */
			private var _tagsList:List;
			
			/**
			 *	@private
			 * 
			 * 	The dataprovider for the <code>_tagsList</code> object.
			 */
			private var _dataProvider:IList;
			
			/**
			 *	@private
			 * 
			 * 	Indicates whether the data provider has benn set, or not.
			 */
			private var _hasDataProviderChanged:Boolean = false;
			
			/**
			 *	@private
			 * 
			 * 	The placehoder for displaying the dropdown list in the popup component.
			 */
			private var _popupGroup:Group;
			
			//--------------------------------------------------------------------------
			//
			//  Private methods
			//
			//--------------------------------------------------------------------------
			
			/**
			 *	@private
			 * 
			 *	Method invoked each time the user types a new letter in the text field.
			 */
			private function inputKeyUpHandler(e:KeyboardEvent):void {
				if (e.keyCode == Keyboard.ENTER) {
					this.removePopup();
				} else if (e.keyCode == Keyboard.ESCAPE) {
					this.removePopup();
					this.focusManager.setFocus(_tagsList);
					this.focusManager.hideFocus();
				} else {
					var evt:UserInputEvent = new UserInputEvent(UserInputEvent.TEXT_EDIT);
					evt.text = e.target.text;
					this.dispatchEvent(evt);
				}
			}
			
			/**
			 *	@private
			 * 
			 *	Changes the position of the dropdown list according to the global
			 * 	coordinates of the text field.
			 */
			private function setListPosition():void {
				var localPoint:Point = new Point(0, 43);
				var globalPoint:Point = localToGlobal(localPoint);
				_tagsList.x = globalPoint.x;
				_tagsList.y = globalPoint.y;
			}
			
			/**
			 *	@private
			 * 
			 * 	Creates the dropdown list Popup.
			 */
			private function createPopup():void {
				if( _popupGroup == null) {
					_popupGroup = PopUpManager.createPopUp(this, Group) as Group;
					_popupGroup.addElement(_tagsList);
					FlexGlobals.topLevelApplication.addEventListener(
						Event.RESIZE, this.resizeApplicationHandler, false, 0, true
					);
					this.callLater(setListPosition);
				}
			}
			
			/**
			 *	@private
			 * 
			 * 	Removes the dropdown list Popup from the display list.
			 */
			private function removePopup():void {
				if (_popupGroup != null) {
					_popupGroup.removeElement(_tagsList);
					PopUpManager.removePopUp(_popupGroup);
					_popupGroup = null;
					FlexGlobals.topLevelApplication.removeEventListener(
						Event.RESIZE, this.resizeApplicationHandler
					);
				}
			}
			
			/**
			 *	@private
			 * 
			 * 	Sets the text value when the user selected an item in the tag list.
			 */
			private function changeHandler(e:IndexChangeEvent):void {
				var value:String = String(_dataProvider.getItemAt(e.newIndex));
				this.inputField.text = value;
				var len:int = value.length;
				this.inputField.selectRange(len, len);
				this.removePopup();
			}
			
			/**
			 *	@private
			 * 
			 * 	Hides the dropdown list when the application is resized.
			 */
			private function resizeApplicationHandler(e:Event):void {
				this.removePopup();
			}
			
			/**
			 *	@private
			 * 
			 * 	Handles the <code>caseSelect</code> <code>Event.CHANGE</code> event.
			 */
			private function caseModeChangeHandler(e:Event):void {
				this.removePopup();
				var evt:UserInputEvent = new UserInputEvent(UserInputEvent.CASE_MODE_CHANGE);
				evt.caseMode = e.target.selected == true ?
					CaseMode.CASE_SENSITIVE : CaseMode.CASE_INSENSITIVE;
				this.dispatchEvent(evt);
			}
			
			/**
			 *	@private
			 * 
			 * 	Displays the dropdown list when the component gets the focus.
			 */
			private function inputFocusInHandler(e:FocusEvent):void {
				if (_dataProvider.length > 0) {
					this.createPopup();
				}
			}
		]]>
	</fx:Script>
	<!-- CheckBox for changing case mode of the application -->
	<s:CheckBox id="caseSelect"
		label="Case sensitive"
		color="0x666666" symbolColor="0x666666"
		change="this.caseModeChangeHandler(event);" />
	<!-- Input field for the auto-completion -->
	<s:TextInput id="inputField"
		top="20"
		width="200"
		keyUp="this.inputKeyUpHandler(event);"
		focusIn="this.inputFocusInHandler(event);" />
</s:Group>